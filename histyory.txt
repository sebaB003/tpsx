 def add_related_topic(self, topic1_label, topic2_label, coexist=True, bidirectional=True):
        """Adds a relation between two topics

        If bidirectional is true topics have a shared relation
        topic1 -- topic2
        If bidirectional is false topics have a one way relation
        topic1 -> topic2

        :param topic1_label: str
        :param topic2_label: str
        :param coexist: bool
        :param bidirectional: bool
        :return:
        """
        exists = False
        topic_res = None

        if topic1_label == topic2_label:
            raise ValueError('Can\'t create a relation with the same topic')

        if not self.get_topic(topic1_label):
            raise ValueError(f'Topic1 is not defined: {topic1_label}')

        if not self.get_topic(topic2_label):
            raise ValueError(f'Topic2 is not defined: {topic2_label}')

        for related_topic in self.related_topics:
            if bidirectional:
                if related_topic.topic1 == topic1_label and related_topic.topic2 == topic2_label and related_topic.bidirectional and bidirectional:
                    exists = True
                    topic_res = related_topic
                    break
                elif related_topic.topic2 == topic1_label and related_topic.topic1 == topic2_label and related_topic.bidirectional and bidirectional:
                    exists = True
                    topic_res = related_topic
                    break
            else:
                if related_topic.topic1 == topic1_label and related_topic.topic2 == topic2_label and not related_topic.bidirectional and not bidirectional:
                    exists = True
                    topic_res = related_topic
                    break

        if not exists:
            topic_res = RelatedTopic(topic1_label, topic2_label, coexist, bidirectional)
            self.related_topics.append(topic_res)
        else:
            topic_res.coexist = coexist

        return topic_res